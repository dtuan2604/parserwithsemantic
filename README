## Project 3: The Parser with Semantic Implementation

Name:		Duong Tuan Hoang
Section: 	CMPSCI 4280 - Program Translation Project
VCS:		git
Date:		04/13/2022
Project Option:	Local Scope 

## Files	
	main.c - the main program to process the input
	parser.c, parser.h - the parser of the program
	node.h - header file defining the nodes of the tree
	tree.c, tree.h - file containing functions to build and destroy the parse tree
	token.h - header file defining tokenID and token data type
	lex.h - header file defining basic lexical definition
	helper.h - header file containing FSA table and references to operators, keywords, token names and errors
	scanner.h, scanner.c - the scanner program
	stack.c, stack.h - files defining the variable stack for the program
	generator.c, generator.h - file containing the function to do semantical checking on the program
	Makefile 	

## Run the program
	> make
	> To give the program keyboard input, run: ./statSem (remember to Enter and then Ctrl + D 
	to finish the input)
	> To direct the input from a file into program, run: ./statSem < filename
	> To let the program read input from a file, run: ./statSem filename

## Remove all executable and object files

	> make clean

## Description
	> Based on the lexical definition provided, the scanner will parse through the file and 
	export 4 types of token "identifier", "number", "operator", and "EOF".
	> The scanner will automatically skip whitespace and comments surrounded by "##".
	> This scanner can determine 5 errors which is specified in the lex.h. If the program encounter
        error, the error is reported to the screen and then the program is terminated.
	> The parser will call scanner every time it needs a token 
	> The parser will parse the program based on the BNF grammar provided. There are some modifications 
	made to ensure the programm is in LL(1).
	Modification: 
		<stat> -> .... | <general loop>;|... (instead of loop1 and loop2)
		<general loop> -> repeat (<loop1> | <loop2>)
		The fragment '[<expr><RO><expr>]' is turned into <condition> for short
		<N> -> <A><N'>
		<N'>-> +<A><N'> | /<A><N'> | empty
 
	> The parser will give the specific error if it found out that the current token doesn't not match
	with the expected token	
	> After that, main program will call function to check semantically. The program will parse through the tree built
	from the input file preorder-ly. 
	> The scope rule is implemented the same as in C. A variable must be defined before using. A variable can not be
	defined twice (in the same scope, or any of its enclosing scope, or global scope)
	> This compiler processes assuming that there are no more than 200 nested blocks in the program and there are no 
	more than 100 variables existed at the same time on stack. Otherwise, the program will terminate and report error.
	> At the termination, the program will pop all the variables left in the stack
